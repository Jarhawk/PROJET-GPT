-- Consolidated Supabase schema for MamaStock
-- Generated by merging all SQL definitions

-- 1. Extensions
create extension if not exists "uuid-ossp";
create extension if not exists "pgcrypto";
create extension if not exists "pg_net";

-- 2. Tables
create table if not exists public.mamas (
  id uuid primary key default uuid_generate_v4(),
  nom text not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.fournisseurs (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid not null,
  nom text not null,
  contact text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.produits (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid not null,
  nom text not null,
  fournisseur_id uuid,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.roles (
  id uuid primary key default gen_random_uuid(),
  nom text not null,
  access_rights jsonb default '{}'::jsonb,
  actif boolean default true,
  mama_id uuid not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.utilisateurs (
  id uuid primary key default gen_random_uuid(),
  nom text not null,
  email text not null,
  auth_id uuid unique,
  role_id uuid,
  mama_id uuid not null,
  actif boolean default true,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.commandes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid not null,
  fournisseur_id uuid,
  reference text,
  date_commande date default current_date,
  statut text default 'brouillon' check (statut in ('brouillon','validée','envoyée')),
  commentaire text,
  created_by uuid,
  validated_by uuid,
  envoyee_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  date_livraison_prevue date,
  montant_total numeric(12,2),
  bl_id uuid,
  facture_id uuid
);

create table if not exists public.commande_lignes (
  id uuid primary key default uuid_generate_v4(),
  commande_id uuid not null,
  produit_id uuid not null,
  mama_id uuid not null,
  quantite numeric,
  unite text,
  prix_achat numeric,
  total_ligne numeric generated always as (coalesce(quantite,0) * coalesce(prix_achat,0)) stored,
  suggestion boolean default false,
  commentaire text
);

create table if not exists public.templates_commandes (
  id uuid primary key default uuid_generate_v4(),
  nom text not null,
  adresse_livraison text,
  pied_de_page text,
  champs_visibles jsonb default '{}'::jsonb,
  actif boolean default true,
  mama_id uuid not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.emails_envoyes (
  id uuid primary key default gen_random_uuid(),
  commande_id uuid not null,
  email text not null,
  statut text default 'en_attente',
  envoye_le timestamptz default now(),
  mama_id uuid not null
);

create table if not exists public.permissions (
  id uuid primary key default gen_random_uuid(),
  role_id uuid not null,
  module text not null,
  droit text not null,
  mama_id uuid not null,
  created_at timestamptz default now()
);

create table if not exists public.consentements_utilisateur (
  id uuid primary key default gen_random_uuid(),
  utilisateur_id uuid not null,
  user_id uuid,
  mama_id uuid not null,
  type_consentement text not null,
  consentement boolean not null,
  date_consentement timestamptz default now()
);

-- 3. Indexes
create index if not exists idx_fournisseurs_mama_id on public.fournisseurs(mama_id);
create index if not exists idx_produits_mama_id on public.produits(mama_id);
create index if not exists idx_roles_mama_id on public.roles(mama_id);
create index if not exists idx_utilisateurs_mama_id on public.utilisateurs(mama_id);
create index if not exists idx_commandes_mama_id on public.commandes(mama_id);
create index if not exists idx_commandes_fournisseur_id on public.commandes(fournisseur_id);
create index if not exists idx_commande_lignes_commande_id on public.commande_lignes(commande_id);
create index if not exists idx_commande_lignes_mama_id on public.commande_lignes(mama_id);
create index if not exists idx_templates_commandes_mama on public.templates_commandes(mama_id);
create index if not exists idx_emails_envoyes_commande on public.emails_envoyes(commande_id);
create index if not exists idx_emails_envoyes_mama_id on public.emails_envoyes(mama_id);
create index if not exists idx_permissions_role_id on public.permissions(role_id);
create index if not exists idx_permissions_mama_id on public.permissions(mama_id);
create index if not exists idx_consentements_utilisateur_mama_id on public.consentements_utilisateur(mama_id);

-- 4. Foreign keys
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fournisseurs_mama_id') then
    alter table public.fournisseurs
      add constraint fk_fournisseurs_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_produits_mama_id') then
    alter table public.produits
      add constraint fk_produits_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_produits_fournisseur_id') then
    alter table public.produits
      add constraint fk_produits_fournisseur_id foreign key (fournisseur_id) references public.fournisseurs(id) on delete set null;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_roles_mama_id') then
    alter table public.roles
      add constraint fk_roles_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_utilisateurs_mama_id') then
    alter table public.utilisateurs
      add constraint fk_utilisateurs_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_utilisateurs_role_id') then
    alter table public.utilisateurs
      add constraint fk_utilisateurs_role_id foreign key (role_id) references public.roles(id) on delete restrict;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commandes_mama_id') then
    alter table public.commandes
      add constraint fk_commandes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commandes_fournisseur_id') then
    alter table public.commandes
      add constraint fk_commandes_fournisseur_id foreign key (fournisseur_id) references public.fournisseurs(id) on delete set null;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commandes_created_by') then
    alter table public.commandes
      add constraint fk_commandes_created_by foreign key (created_by) references public.utilisateurs(id) on delete set null;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commandes_validated_by') then
    alter table public.commandes
      add constraint fk_commandes_validated_by foreign key (validated_by) references public.utilisateurs(id) on delete set null;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commande_lignes_commande_id') then
    alter table public.commande_lignes
      add constraint fk_commande_lignes_commande_id foreign key (commande_id) references public.commandes(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commande_lignes_produit_id') then
    alter table public.commande_lignes
      add constraint fk_commande_lignes_produit_id foreign key (produit_id) references public.produits(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_commande_lignes_mama_id') then
    alter table public.commande_lignes
      add constraint fk_commande_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_templates_commandes_mama_id') then
    alter table public.templates_commandes
      add constraint fk_templates_commandes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_emails_envoyes_commande_id') then
    alter table public.emails_envoyes
      add constraint fk_emails_envoyes_commande_id foreign key (commande_id) references public.commandes(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_emails_envoyes_mama_id') then
    alter table public.emails_envoyes
      add constraint fk_emails_envoyes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_permissions_role_id') then
    alter table public.permissions
      add constraint fk_permissions_role_id foreign key (role_id) references public.roles(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_permissions_mama_id') then
    alter table public.permissions
      add constraint fk_permissions_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_consentements_utilisateur_utilisateur_id') then
    alter table public.consentements_utilisateur
      add constraint fk_consentements_utilisateur_utilisateur_id foreign key (utilisateur_id) references public.utilisateurs(id) on delete cascade;
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_consentements_utilisateur_mama_id') then
    alter table public.consentements_utilisateur
      add constraint fk_consentements_utilisateur_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;

-- 5. Views
create or replace view public.utilisateurs_complets as
select u.*, r.nom as role_nom, r.access_rights as role_access_rights
from public.utilisateurs u
left join public.roles r on r.id = u.role_id;

-- 6. Functions
create or replace function public.update_timestamp_roles() returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create or replace function public.update_timestamp_templates() returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create or replace function public.current_user_mama_id()
returns uuid
language sql stable as $$
  select u.mama_id from public.utilisateurs u where u.auth_id = auth.uid();
$$;

create or replace function public.create_utilisateur(
  p_email text,
  p_nom text,
  p_role_id uuid,
  p_mama_id uuid
) returns json
language plpgsql
security definer as $$
declare
  v_auth_id uuid;
  v_password text;
begin
  if exists(select 1 from auth.users where lower(email) = lower(p_email)) then
    raise exception 'email exists';
  end if;
  v_password := encode(gen_random_bytes(9), 'base64');
  insert into auth.users(email, encrypted_password)
  values (p_email, crypt(v_password, gen_salt('bf'))) returning id into v_auth_id;
  insert into public.utilisateurs(nom, email, auth_id, role_id, mama_id, actif)
  values(p_nom, p_email, v_auth_id, p_role_id, p_mama_id, true);
  perform net.http_post(
    url => 'https://example.com/send',
    body => jsonb_build_object('email', p_email, 'password', v_password)
  );
  return json_build_object('success', true);
exception when others then
  return json_build_object('success', false, 'error', SQLERRM);
end;$$;

create or replace function public.calcul_ecarts_inventaire(p_date date, p_zone text, mama_id_param uuid)
returns table(produit text, stock_theorique numeric, stock_reel numeric, ecart numeric, motif text)
language plpgsql as $$
begin
  return;
end;
$$;

create or replace function public.fn_calc_budgets(mama_id_param uuid, periode_param text)
returns table(famille text, ecart_pct numeric)
language plpgsql as $$
begin
  return;
end;
$$;

-- 7. Triggers
do $$ begin
  if not exists (select 1 from pg_trigger where tgname = 'trg_roles_updated_at') then
    create trigger trg_roles_updated_at
    before update on public.roles
    for each row execute procedure public.update_timestamp_roles();
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_trigger where tgname = 'trg_templates_commandes_updated_at') then
    create trigger trg_templates_commandes_updated_at
    before update on public.templates_commandes
    for each row execute procedure public.update_timestamp_templates();
  end if;
end $$;

-- 8. RLS & Policies
alter table public.mamas enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='mamas' and policyname='mamas_all') then
    create policy mamas_all on public.mamas
      for all using (id = current_user_mama_id())
      with check (id = current_user_mama_id());
  end if;
end $$;

alter table public.fournisseurs enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fournisseurs' and policyname='fournisseurs_all') then
    create policy fournisseurs_all on public.fournisseurs
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.produits enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='produits' and policyname='produits_all') then
    create policy produits_all on public.produits
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.roles enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='roles' and policyname='roles_all') then
    create policy roles_all on public.roles
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.utilisateurs enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='utilisateurs' and policyname='utilisateurs_all') then
    create policy utilisateurs_all on public.utilisateurs
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.commandes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='commandes' and policyname='commandes_all') then
    create policy commandes_all on public.commandes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.commande_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='commande_lignes' and policyname='commande_lignes_all') then
    create policy commande_lignes_all on public.commande_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.templates_commandes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='templates_commandes' and policyname='templates_commandes_all') then
    create policy templates_commandes_all on public.templates_commandes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.emails_envoyes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='emails_envoyes' and policyname='emails_envoyes_all') then
    create policy emails_envoyes_all on public.emails_envoyes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.permissions enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='permissions' and policyname='permissions_all') then
    create policy permissions_all on public.permissions
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

alter table public.consentements_utilisateur enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='consentements_utilisateur' and policyname='consentements_utilisateur_all') then
    create policy consentements_utilisateur_all on public.consentements_utilisateur
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;

-- 9. Sécurité (GRANT)
grant select, insert, update, delete on public.mamas to authenticated;
grant select, insert, update, delete on public.fournisseurs to authenticated;
grant select, insert, update, delete on public.produits to authenticated;
grant select, insert, update, delete on public.roles to authenticated;
grant select, insert, update, delete on public.utilisateurs to authenticated;
grant select, insert, update, delete on public.commandes to authenticated;
grant select, insert, update, delete on public.commande_lignes to authenticated;
grant select, insert, update, delete on public.templates_commandes to authenticated;
grant select, insert, update, delete on public.emails_envoyes to authenticated;
grant select, insert, update, delete on public.permissions to authenticated;
grant select, insert, update, delete on public.consentements_utilisateur to authenticated;
grant execute on function public.create_utilisateur(text, text, uuid, uuid) to authenticated;
grant execute on function public.calcul_ecarts_inventaire(date, text, uuid) to authenticated;
grant execute on function public.fn_calc_budgets(uuid, text) to authenticated;

-- 10. Données initiales (insert)
-- (aucune donnée initiale)

-- ===================================================================
-- Generated placeholders for previously missing schema elements

-- 2.b Additional Tables
create table if not exists public.achats (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_achats_mama_id on public.achats(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_achats_mama_id') then
    alter table public.achats
      add constraint fk_achats_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.achats enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='achats' and policyname='achats_all') then
    create policy achats_all on public.achats
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.achats to authenticated;
create table if not exists public.alertes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_alertes_mama_id on public.alertes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_alertes_mama_id') then
    alter table public.alertes
      add constraint fk_alertes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.alertes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='alertes' and policyname='alertes_all') then
    create policy alertes_all on public.alertes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.alertes to authenticated;
create table if not exists public.api_keys (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_api_keys_mama_id on public.api_keys(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_api_keys_mama_id') then
    alter table public.api_keys
      add constraint fk_api_keys_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.api_keys enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='api_keys' and policyname='api_keys_all') then
    create policy api_keys_all on public.api_keys
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.api_keys to authenticated;
create table if not exists public.auth_double_facteur (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_auth_double_facteur_mama_id on public.auth_double_facteur(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_auth_double_facteur_mama_id') then
    alter table public.auth_double_facteur
      add constraint fk_auth_double_facteur_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.auth_double_facteur enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='auth_double_facteur' and policyname='auth_double_facteur_all') then
    create policy auth_double_facteur_all on public.auth_double_facteur
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.auth_double_facteur to authenticated;
create table if not exists public.bons_livraison (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_bons_livraison_mama_id on public.bons_livraison(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_bons_livraison_mama_id') then
    alter table public.bons_livraison
      add constraint fk_bons_livraison_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.bons_livraison enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='bons_livraison' and policyname='bons_livraison_all') then
    create policy bons_livraison_all on public.bons_livraison
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.bons_livraison to authenticated;
create table if not exists public.catalogue_updates (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_catalogue_updates_mama_id on public.catalogue_updates(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_catalogue_updates_mama_id') then
    alter table public.catalogue_updates
      add constraint fk_catalogue_updates_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.catalogue_updates enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='catalogue_updates' and policyname='catalogue_updates_all') then
    create policy catalogue_updates_all on public.catalogue_updates
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.catalogue_updates to authenticated;
create table if not exists public.centres_de_cout (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_centres_de_cout_mama_id on public.centres_de_cout(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_centres_de_cout_mama_id') then
    alter table public.centres_de_cout
      add constraint fk_centres_de_cout_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.centres_de_cout enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='centres_de_cout' and policyname='centres_de_cout_all') then
    create policy centres_de_cout_all on public.centres_de_cout
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.centres_de_cout to authenticated;
create table if not exists public.compta_mapping (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_compta_mapping_mama_id on public.compta_mapping(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_compta_mapping_mama_id') then
    alter table public.compta_mapping
      add constraint fk_compta_mapping_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.compta_mapping enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='compta_mapping' and policyname='compta_mapping_all') then
    create policy compta_mapping_all on public.compta_mapping
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.compta_mapping to authenticated;
create table if not exists public.documentation (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_documentation_mama_id on public.documentation(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_documentation_mama_id') then
    alter table public.documentation
      add constraint fk_documentation_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.documentation enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='documentation' and policyname='documentation_all') then
    create policy documentation_all on public.documentation
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.documentation to authenticated;
create table if not exists public.documents (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_documents_mama_id on public.documents(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_documents_mama_id') then
    alter table public.documents
      add constraint fk_documents_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.documents enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='documents' and policyname='documents_all') then
    create policy documents_all on public.documents
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.documents to authenticated;
create table if not exists public.etapes_onboarding (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_etapes_onboarding_mama_id on public.etapes_onboarding(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_etapes_onboarding_mama_id') then
    alter table public.etapes_onboarding
      add constraint fk_etapes_onboarding_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.etapes_onboarding enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='etapes_onboarding' and policyname='etapes_onboarding_all') then
    create policy etapes_onboarding_all on public.etapes_onboarding
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.etapes_onboarding to authenticated;
create table if not exists public.facture_lignes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_facture_lignes_mama_id on public.facture_lignes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_facture_lignes_mama_id') then
    alter table public.facture_lignes
      add constraint fk_facture_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.facture_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='facture_lignes' and policyname='facture_lignes_all') then
    create policy facture_lignes_all on public.facture_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.facture_lignes to authenticated;
create table if not exists public.factures (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_factures_mama_id on public.factures(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_factures_mama_id') then
    alter table public.factures
      add constraint fk_factures_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.factures enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='factures' and policyname='factures_all') then
    create policy factures_all on public.factures
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.factures to authenticated;
create table if not exists public.familles (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_familles_mama_id on public.familles(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_familles_mama_id') then
    alter table public.familles
      add constraint fk_familles_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.familles enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='familles' and policyname='familles_all') then
    create policy familles_all on public.familles
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.familles to authenticated;
create table if not exists public.feedback (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_feedback_mama_id on public.feedback(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_feedback_mama_id') then
    alter table public.feedback
      add constraint fk_feedback_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.feedback enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='feedback' and policyname='feedback_all') then
    create policy feedback_all on public.feedback
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.feedback to authenticated;
create table if not exists public.fiche_cout_history (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fiche_cout_history_mama_id on public.fiche_cout_history(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fiche_cout_history_mama_id') then
    alter table public.fiche_cout_history
      add constraint fk_fiche_cout_history_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fiche_cout_history enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fiche_cout_history' and policyname='fiche_cout_history_all') then
    create policy fiche_cout_history_all on public.fiche_cout_history
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fiche_cout_history to authenticated;
create table if not exists public.fiche_lignes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fiche_lignes_mama_id on public.fiche_lignes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fiche_lignes_mama_id') then
    alter table public.fiche_lignes
      add constraint fk_fiche_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fiche_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fiche_lignes' and policyname='fiche_lignes_all') then
    create policy fiche_lignes_all on public.fiche_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fiche_lignes to authenticated;
create table if not exists public.fiches (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fiches_mama_id on public.fiches(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fiches_mama_id') then
    alter table public.fiches
      add constraint fk_fiches_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fiches enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fiches' and policyname='fiches_all') then
    create policy fiches_all on public.fiches
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fiches to authenticated;
create table if not exists public.fiches_techniques (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fiches_techniques_mama_id on public.fiches_techniques(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fiches_techniques_mama_id') then
    alter table public.fiches_techniques
      add constraint fk_fiches_techniques_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fiches_techniques enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fiches_techniques' and policyname='fiches_techniques_all') then
    create policy fiches_techniques_all on public.fiches_techniques
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fiches_techniques to authenticated;
create table if not exists public.fournisseur_contacts (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fournisseur_contacts_mama_id on public.fournisseur_contacts(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fournisseur_contacts_mama_id') then
    alter table public.fournisseur_contacts
      add constraint fk_fournisseur_contacts_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fournisseur_contacts enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fournisseur_contacts' and policyname='fournisseur_contacts_all') then
    create policy fournisseur_contacts_all on public.fournisseur_contacts
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fournisseur_contacts to authenticated;
create table if not exists public.fournisseur_notes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fournisseur_notes_mama_id on public.fournisseur_notes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fournisseur_notes_mama_id') then
    alter table public.fournisseur_notes
      add constraint fk_fournisseur_notes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fournisseur_notes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fournisseur_notes' and policyname='fournisseur_notes_all') then
    create policy fournisseur_notes_all on public.fournisseur_notes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fournisseur_notes to authenticated;
create table if not exists public.fournisseur_produits (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fournisseur_produits_mama_id on public.fournisseur_produits(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fournisseur_produits_mama_id') then
    alter table public.fournisseur_produits
      add constraint fk_fournisseur_produits_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fournisseur_produits enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fournisseur_produits' and policyname='fournisseur_produits_all') then
    create policy fournisseur_produits_all on public.fournisseur_produits
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fournisseur_produits to authenticated;
create table if not exists public.fournisseurs_api_config (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_fournisseurs_api_config_mama_id on public.fournisseurs_api_config(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_fournisseurs_api_config_mama_id') then
    alter table public.fournisseurs_api_config
      add constraint fk_fournisseurs_api_config_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.fournisseurs_api_config enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='fournisseurs_api_config' and policyname='fournisseurs_api_config_all') then
    create policy fournisseurs_api_config_all on public.fournisseurs_api_config
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.fournisseurs_api_config to authenticated;
create table if not exists public.gadgets (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_gadgets_mama_id on public.gadgets(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_gadgets_mama_id') then
    alter table public.gadgets
      add constraint fk_gadgets_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.gadgets enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='gadgets' and policyname='gadgets_all') then
    create policy gadgets_all on public.gadgets
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.gadgets to authenticated;
create table if not exists public.groupes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_groupes_mama_id on public.groupes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_groupes_mama_id') then
    alter table public.groupes
      add constraint fk_groupes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.groupes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='groupes' and policyname='groupes_all') then
    create policy groupes_all on public.groupes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.groupes to authenticated;
create table if not exists public.guides_seen (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_guides_seen_mama_id on public.guides_seen(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_guides_seen_mama_id') then
    alter table public.guides_seen
      add constraint fk_guides_seen_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.guides_seen enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='guides_seen' and policyname='guides_seen_all') then
    create policy guides_seen_all on public.guides_seen
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.guides_seen to authenticated;
create table if not exists public.help_articles (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_help_articles_mama_id on public.help_articles(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_help_articles_mama_id') then
    alter table public.help_articles
      add constraint fk_help_articles_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.help_articles enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='help_articles' and policyname='help_articles_all') then
    create policy help_articles_all on public.help_articles
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.help_articles to authenticated;
create table if not exists public.inventaire_lignes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_inventaire_lignes_mama_id on public.inventaire_lignes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_inventaire_lignes_mama_id') then
    alter table public.inventaire_lignes
      add constraint fk_inventaire_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.inventaire_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='inventaire_lignes' and policyname='inventaire_lignes_all') then
    create policy inventaire_lignes_all on public.inventaire_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.inventaire_lignes to authenticated;
create table if not exists public.inventaire_zones (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_inventaire_zones_mama_id on public.inventaire_zones(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_inventaire_zones_mama_id') then
    alter table public.inventaire_zones
      add constraint fk_inventaire_zones_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.inventaire_zones enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='inventaire_zones' and policyname='inventaire_zones_all') then
    create policy inventaire_zones_all on public.inventaire_zones
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.inventaire_zones to authenticated;
create table if not exists public.inventaires (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_inventaires_mama_id on public.inventaires(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_inventaires_mama_id') then
    alter table public.inventaires
      add constraint fk_inventaires_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.inventaires enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='inventaires' and policyname='inventaires_all') then
    create policy inventaires_all on public.inventaires
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.inventaires to authenticated;
create table if not exists public.journaux_utilisateur (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_journaux_utilisateur_mama_id on public.journaux_utilisateur(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_journaux_utilisateur_mama_id') then
    alter table public.journaux_utilisateur
      add constraint fk_journaux_utilisateur_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.journaux_utilisateur enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='journaux_utilisateur' and policyname='journaux_utilisateur_all') then
    create policy journaux_utilisateur_all on public.journaux_utilisateur
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.journaux_utilisateur to authenticated;
create table if not exists public.lignes_bl (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_lignes_bl_mama_id on public.lignes_bl(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_lignes_bl_mama_id') then
    alter table public.lignes_bl
      add constraint fk_lignes_bl_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.lignes_bl enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='lignes_bl' and policyname='lignes_bl_all') then
    create policy lignes_bl_all on public.lignes_bl
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.lignes_bl to authenticated;
create table if not exists public.logs_securite (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_logs_securite_mama_id on public.logs_securite(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_logs_securite_mama_id') then
    alter table public.logs_securite
      add constraint fk_logs_securite_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.logs_securite enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='logs_securite' and policyname='logs_securite_all') then
    create policy logs_securite_all on public.logs_securite
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.logs_securite to authenticated;
create table if not exists public.menu_fiches (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_menu_fiches_mama_id on public.menu_fiches(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_menu_fiches_mama_id') then
    alter table public.menu_fiches
      add constraint fk_menu_fiches_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.menu_fiches enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='menu_fiches' and policyname='menu_fiches_all') then
    create policy menu_fiches_all on public.menu_fiches
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.menu_fiches to authenticated;
create table if not exists public.menus (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_menus_mama_id on public.menus(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_menus_mama_id') then
    alter table public.menus
      add constraint fk_menus_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.menus enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='menus' and policyname='menus_all') then
    create policy menus_all on public.menus
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.menus to authenticated;
create table if not exists public.menus_groupes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_menus_groupes_mama_id on public.menus_groupes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_menus_groupes_mama_id') then
    alter table public.menus_groupes
      add constraint fk_menus_groupes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.menus_groupes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='menus_groupes' and policyname='menus_groupes_all') then
    create policy menus_groupes_all on public.menus_groupes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.menus_groupes to authenticated;
create table if not exists public.menus_groupes_fiches (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_menus_groupes_fiches_mama_id on public.menus_groupes_fiches(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_menus_groupes_fiches_mama_id') then
    alter table public.menus_groupes_fiches
      add constraint fk_menus_groupes_fiches_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.menus_groupes_fiches enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='menus_groupes_fiches' and policyname='menus_groupes_fiches_all') then
    create policy menus_groupes_fiches_all on public.menus_groupes_fiches
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.menus_groupes_fiches to authenticated;
create table if not exists public.menus_jour (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_menus_jour_mama_id on public.menus_jour(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_menus_jour_mama_id') then
    alter table public.menus_jour
      add constraint fk_menus_jour_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.menus_jour enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='menus_jour' and policyname='menus_jour_all') then
    create policy menus_jour_all on public.menus_jour
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.menus_jour to authenticated;
create table if not exists public.menus_jour_fiches (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_menus_jour_fiches_mama_id on public.menus_jour_fiches(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_menus_jour_fiches_mama_id') then
    alter table public.menus_jour_fiches
      add constraint fk_menus_jour_fiches_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.menus_jour_fiches enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='menus_jour_fiches' and policyname='menus_jour_fiches_all') then
    create policy menus_jour_fiches_all on public.menus_jour_fiches
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.menus_jour_fiches to authenticated;
create table if not exists public.mouvements (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_mouvements_mama_id on public.mouvements(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_mouvements_mama_id') then
    alter table public.mouvements
      add constraint fk_mouvements_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.mouvements enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='mouvements' and policyname='mouvements_all') then
    create policy mouvements_all on public.mouvements
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.mouvements to authenticated;
create table if not exists public.mouvements_centres_cout (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_mouvements_centres_cout_mama_id on public.mouvements_centres_cout(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_mouvements_centres_cout_mama_id') then
    alter table public.mouvements_centres_cout
      add constraint fk_mouvements_centres_cout_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.mouvements_centres_cout enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='mouvements_centres_cout' and policyname='mouvements_centres_cout_all') then
    create policy mouvements_centres_cout_all on public.mouvements_centres_cout
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.mouvements_centres_cout to authenticated;
create table if not exists public.notification_preferences (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_notification_preferences_mama_id on public.notification_preferences(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_notification_preferences_mama_id') then
    alter table public.notification_preferences
      add constraint fk_notification_preferences_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.notification_preferences enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='notification_preferences' and policyname='notification_preferences_all') then
    create policy notification_preferences_all on public.notification_preferences
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.notification_preferences to authenticated;
create table if not exists public.notifications (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_notifications_mama_id on public.notifications(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_notifications_mama_id') then
    alter table public.notifications
      add constraint fk_notifications_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.notifications enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='notifications' and policyname='notifications_all') then
    create policy notifications_all on public.notifications
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.notifications to authenticated;
create table if not exists public.parametres_commandes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_parametres_commandes_mama_id on public.parametres_commandes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_parametres_commandes_mama_id') then
    alter table public.parametres_commandes
      add constraint fk_parametres_commandes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.parametres_commandes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='parametres_commandes' and policyname='parametres_commandes_all') then
    create policy parametres_commandes_all on public.parametres_commandes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.parametres_commandes to authenticated;
create table if not exists public.periodes_comptables (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_periodes_comptables_mama_id on public.periodes_comptables(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_periodes_comptables_mama_id') then
    alter table public.periodes_comptables
      add constraint fk_periodes_comptables_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.periodes_comptables enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='periodes_comptables' and policyname='periodes_comptables_all') then
    create policy periodes_comptables_all on public.periodes_comptables
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.periodes_comptables to authenticated;
create table if not exists public.pertes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_pertes_mama_id on public.pertes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_pertes_mama_id') then
    alter table public.pertes
      add constraint fk_pertes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.pertes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='pertes' and policyname='pertes_all') then
    create policy pertes_all on public.pertes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.pertes to authenticated;
create table if not exists public.planning_lignes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_planning_lignes_mama_id on public.planning_lignes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_planning_lignes_mama_id') then
    alter table public.planning_lignes
      add constraint fk_planning_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.planning_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='planning_lignes' and policyname='planning_lignes_all') then
    create policy planning_lignes_all on public.planning_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.planning_lignes to authenticated;
create table if not exists public.planning_previsionnel (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_planning_previsionnel_mama_id on public.planning_previsionnel(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_planning_previsionnel_mama_id') then
    alter table public.planning_previsionnel
      add constraint fk_planning_previsionnel_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.planning_previsionnel enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='planning_previsionnel' and policyname='planning_previsionnel_all') then
    create policy planning_previsionnel_all on public.planning_previsionnel
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.planning_previsionnel to authenticated;
create table if not exists public.promotions (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_promotions_mama_id on public.promotions(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_promotions_mama_id') then
    alter table public.promotions
      add constraint fk_promotions_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.promotions enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='promotions' and policyname='promotions_all') then
    create policy promotions_all on public.promotions
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.promotions to authenticated;
create table if not exists public.regles_alertes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_regles_alertes_mama_id on public.regles_alertes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_regles_alertes_mama_id') then
    alter table public.regles_alertes
      add constraint fk_regles_alertes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.regles_alertes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='regles_alertes' and policyname='regles_alertes_all') then
    create policy regles_alertes_all on public.regles_alertes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.regles_alertes to authenticated;
create table if not exists public.requisition_lignes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_requisition_lignes_mama_id on public.requisition_lignes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_requisition_lignes_mama_id') then
    alter table public.requisition_lignes
      add constraint fk_requisition_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.requisition_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='requisition_lignes' and policyname='requisition_lignes_all') then
    create policy requisition_lignes_all on public.requisition_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.requisition_lignes to authenticated;
create table if not exists public.requisitions (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_requisitions_mama_id on public.requisitions(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_requisitions_mama_id') then
    alter table public.requisitions
      add constraint fk_requisitions_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.requisitions enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='requisitions' and policyname='requisitions_all') then
    create policy requisitions_all on public.requisitions
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.requisitions to authenticated;
create table if not exists public.signalements (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_signalements_mama_id on public.signalements(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_signalements_mama_id') then
    alter table public.signalements
      add constraint fk_signalements_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.signalements enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='signalements' and policyname='signalements_all') then
    create policy signalements_all on public.signalements
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.signalements to authenticated;
create table if not exists public.sous_familles (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_sous_familles_mama_id on public.sous_familles(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_sous_familles_mama_id') then
    alter table public.sous_familles
      add constraint fk_sous_familles_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.sous_familles enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='sous_familles' and policyname='sous_familles_all') then
    create policy sous_familles_all on public.sous_familles
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.sous_familles to authenticated;
create table if not exists public.stocks (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_stocks_mama_id on public.stocks(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_stocks_mama_id') then
    alter table public.stocks
      add constraint fk_stocks_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.stocks enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='stocks' and policyname='stocks_all') then
    create policy stocks_all on public.stocks
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.stocks to authenticated;
create table if not exists public.tableaux_de_bord (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_tableaux_de_bord_mama_id on public.tableaux_de_bord(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_tableaux_de_bord_mama_id') then
    alter table public.tableaux_de_bord
      add constraint fk_tableaux_de_bord_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.tableaux_de_bord enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='tableaux_de_bord' and policyname='tableaux_de_bord_all') then
    create policy tableaux_de_bord_all on public.tableaux_de_bord
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.tableaux_de_bord to authenticated;
create table if not exists public.taches (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_taches_mama_id on public.taches(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_taches_mama_id') then
    alter table public.taches
      add constraint fk_taches_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.taches enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='taches' and policyname='taches_all') then
    create policy taches_all on public.taches
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.taches to authenticated;
create table if not exists public.tooltips (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_tooltips_mama_id on public.tooltips(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_tooltips_mama_id') then
    alter table public.tooltips
      add constraint fk_tooltips_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.tooltips enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='tooltips' and policyname='tooltips_all') then
    create policy tooltips_all on public.tooltips
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.tooltips to authenticated;
create table if not exists public.transfert_lignes (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_transfert_lignes_mama_id on public.transfert_lignes(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_transfert_lignes_mama_id') then
    alter table public.transfert_lignes
      add constraint fk_transfert_lignes_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.transfert_lignes enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='transfert_lignes' and policyname='transfert_lignes_all') then
    create policy transfert_lignes_all on public.transfert_lignes
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.transfert_lignes to authenticated;
create table if not exists public.transferts (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_transferts_mama_id on public.transferts(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_transferts_mama_id') then
    alter table public.transferts
      add constraint fk_transferts_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.transferts enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='transferts' and policyname='transferts_all') then
    create policy transferts_all on public.transferts
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.transferts to authenticated;
create table if not exists public.unites (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_unites_mama_id on public.unites(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_unites_mama_id') then
    alter table public.unites
      add constraint fk_unites_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.unites enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='unites' and policyname='unites_all') then
    create policy unites_all on public.unites
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.unites to authenticated;
create table if not exists public.usage_stats (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_usage_stats_mama_id on public.usage_stats(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_usage_stats_mama_id') then
    alter table public.usage_stats
      add constraint fk_usage_stats_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.usage_stats enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='usage_stats' and policyname='usage_stats_all') then
    create policy usage_stats_all on public.usage_stats
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.usage_stats to authenticated;
create table if not exists public.utilisateurs_taches (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_utilisateurs_taches_mama_id on public.utilisateurs_taches(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_utilisateurs_taches_mama_id') then
    alter table public.utilisateurs_taches
      add constraint fk_utilisateurs_taches_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.utilisateurs_taches enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='utilisateurs_taches' and policyname='utilisateurs_taches_all') then
    create policy utilisateurs_taches_all on public.utilisateurs_taches
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.utilisateurs_taches to authenticated;
create table if not exists public.validation_requests (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_validation_requests_mama_id on public.validation_requests(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_validation_requests_mama_id') then
    alter table public.validation_requests
      add constraint fk_validation_requests_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.validation_requests enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='validation_requests' and policyname='validation_requests_all') then
    create policy validation_requests_all on public.validation_requests
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.validation_requests to authenticated;
create table if not exists public.ventes_boissons (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_ventes_boissons_mama_id on public.ventes_boissons(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_ventes_boissons_mama_id') then
    alter table public.ventes_boissons
      add constraint fk_ventes_boissons_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.ventes_boissons enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='ventes_boissons' and policyname='ventes_boissons_all') then
    create policy ventes_boissons_all on public.ventes_boissons
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.ventes_boissons to authenticated;
create table if not exists public.ventes_fiches_carte (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_ventes_fiches_carte_mama_id on public.ventes_fiches_carte(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_ventes_fiches_carte_mama_id') then
    alter table public.ventes_fiches_carte
      add constraint fk_ventes_fiches_carte_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.ventes_fiches_carte enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='ventes_fiches_carte' and policyname='ventes_fiches_carte_all') then
    create policy ventes_fiches_carte_all on public.ventes_fiches_carte
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.ventes_fiches_carte to authenticated;
create table if not exists public.zones_stock (
  id uuid primary key default uuid_generate_v4(),
  mama_id uuid,
  created_at timestamptz default now()
);
create index if not exists idx_zones_stock_mama_id on public.zones_stock(mama_id);
do $$ begin
  if not exists (select 1 from pg_constraint where conname = 'fk_zones_stock_mama_id') then
    alter table public.zones_stock
      add constraint fk_zones_stock_mama_id foreign key (mama_id) references public.mamas(id) on delete cascade;
  end if;
end $$;
alter table public.zones_stock enable row level security;
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='zones_stock' and policyname='zones_stock_all') then
    create policy zones_stock_all on public.zones_stock
      for all using (mama_id = current_user_mama_id())
      with check (mama_id = current_user_mama_id());
  end if;
end $$;
grant select, insert, update, delete on public.zones_stock to authenticated;

-- 5.b Additional Views
create or replace view public.v_achats_mensuels as select 1 as placeholder;
create or replace view public.v_analytique_stock as select 1 as placeholder;
create or replace view public.v_besoins_previsionnels as select 1 as placeholder;
create or replace view public.v_boissons as select 1 as placeholder;
create or replace view public.v_consolidated_stats as select 1 as placeholder;
create or replace view public.v_cost_center_month as select 1 as placeholder;
create or replace view public.v_cost_center_monthly as select 1 as placeholder;
create or replace view public.v_ecarts_inventaire as select 1 as placeholder;
create or replace view public.v_evolution_achats as select 1 as placeholder;
create or replace view public.v_fournisseurs_inactifs as select 1 as placeholder;
create or replace view public.v_menu_engineering as select 1 as placeholder;
create or replace view public.v_performance_fiches as select 1 as placeholder;
create or replace view public.v_pmp as select 1 as placeholder;
create or replace view public.v_products_last_price as select 1 as placeholder;
create or replace view public.v_produits_dernier_prix as select 1 as placeholder;
create or replace view public.v_produits_utilises as select 1 as placeholder;
create or replace view public.v_reco_stockmort as select 1 as placeholder;
create or replace view public.v_reco_surcout as select 1 as placeholder;
create or replace view public.v_requisitions as select 1 as placeholder;
create or replace view public.v_stock_requisitionne as select 1 as placeholder;
create or replace view public.v_stocks as select 1 as placeholder;
create or replace view public.v_taches_assignees as select 1 as placeholder;
create or replace view public.v_tendance_prix_produit as select 1 as placeholder;
create or replace view public.v_top_fournisseurs as select 1 as placeholder;

-- 6.b Placeholder Functions
create or replace function public.advanced_stats()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.advanced_stats() to authenticated;
create or replace function public.apply_stock_from_achat()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.apply_stock_from_achat() to authenticated;
create or replace function public.calcul_ecarts_inventaire()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.calcul_ecarts_inventaire() to authenticated;
create or replace function public.compare_fiche()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.compare_fiche() to authenticated;
create or replace function public.consolidated_stats()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.consolidated_stats() to authenticated;
create or replace function public.create_utilisateur()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.create_utilisateur() to authenticated;
create or replace function public.dashboard_stats()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.dashboard_stats() to authenticated;
create or replace function public.disable_two_fa()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.disable_two_fa() to authenticated;
create or replace function public.enable_two_fa()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.enable_two_fa() to authenticated;
create or replace function public.fn_calc_budgets()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.fn_calc_budgets() to authenticated;
create or replace function public.import_invoice()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.import_invoice() to authenticated;
create or replace function public.send_email_notification()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.send_email_notification() to authenticated;
create or replace function public.send_notification_webhook()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.send_notification_webhook() to authenticated;
create or replace function public.stats_achats_fournisseur()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.stats_achats_fournisseur() to authenticated;
create or replace function public.stats_achats_fournisseurs()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.stats_achats_fournisseurs() to authenticated;
create or replace function public.stats_cost_centers()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.stats_cost_centers() to authenticated;
create or replace function public.stats_multi_mamas()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.stats_multi_mamas() to authenticated;
create or replace function public.stats_rotation_produit()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.stats_rotation_produit() to authenticated;
create or replace function public.top_produits()
returns void
language plpgsql as $$
begin
  return;
end;
$$;
grant execute on function public.top_produits() to authenticated;
