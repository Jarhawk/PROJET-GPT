// âœ… generated by Codex 2025-06-19
import { Routes, Route, Navigate } from "react-router-dom";
import { Suspense, lazy } from "react";
import Layout from "@/layout/Layout";
import Login from "@/pages/auth/Login";
import Unauthorized from "@/pages/auth/Unauthorized";
import AuthDebug from "@/pages/debug/AuthDebug";
import { useAuth } from "@/context/AuthContext";

const pageModules = import.meta.glob("./pages/**/*.jsx");

function toRoutePath(file) {
  let p = file.replace(/^\.\/pages/, "").replace(/\.jsx$/, "");
  p = p.replace(/\/index$/i, "");
  const parts = p
    .split("/")
    .map((seg) => seg.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase());
  for (let i = 1; i < parts.length; ) {
    if (parts[i] === parts[i - 1]) {
      parts.splice(i, 1);
    } else {
      i += 1;
    }
  }
  p = parts.join("/");
  if (p === "/auth/login") return "/login";
  if (p === "/debug/auth-debug") return "/debug/auth";
  return p;
}

const routes = Object.entries(pageModules).map(([file, loader]) => ({
  path: toRoutePath(file),
  Component: lazy(loader),
}));

function getAccess(path) {
  if (path.startsWith("/produits")) return "stock";
  if (path.startsWith("/factures")) return "factures";
  if (path.startsWith("/fiches")) return "fiches";
  if (path.startsWith("/parametrage")) return "parametrage";
  if (path.startsWith("/dashboard")) return "dashboard";
  return null;
}

function ProtectedRoute({ children, access }) {
  const { isAuthenticated, loading, role, access_rights } = useAuth();
  if (loading) return null;
  if (!isAuthenticated) return <Navigate to="/login" replace />;
  if (access && role !== "superadmin" && !access_rights?.includes(access)) {
    return <Navigate to="/unauthorized" replace />;
  }
  return children;
}

export default function Router() {
  return (
      <Suspense fallback={null}>
        <Routes>
        <Route path="/login" element={<Login />} />
        <Route element={<Layout />}>
          {routes
            .filter(r => !["/login", "/debug/auth", "/unauthorized"].includes(r.path))
            .map(({ path, Component }) => {
              const Element = Component;
              return (
                <Route
                  key={path}
                  path={path}
                  element={
                    <ProtectedRoute access={getAccess(path)}>
                      <Element />
                    </ProtectedRoute>
                  }
                />
              );
            })}
          <Route path="/debug/auth" element={<ProtectedRoute><AuthDebug /></ProtectedRoute>} />
          <Route path="/unauthorized" element={<Unauthorized />} />
          <Route path="*" element={<Navigate to="/dashboard" replace />} />
        </Route>
      </Routes>
      </Suspense>
  );
}
